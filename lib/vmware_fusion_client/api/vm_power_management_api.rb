=begin
#VMware Fusion API 1.2.0

#REST API Explorer

OpenAPI spec version: 1.2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module VMWareFusionClient
  class VMPowerManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Changes the VM power state
    # @param id ID of VM
    # @param operation VM power operation: on, off, shutdown, suspend, pause, unpause
    # @param [Hash] opts the optional parameters
    # @return [VMPowerState]
    def change_power_state(id, operation, opts = {})
      data, _status_code, _headers = change_power_state_with_http_info(id, operation, opts)
      data
    end

    # Changes the VM power state
    # @param id ID of VM
    # @param operation VM power operation: on, off, shutdown, suspend, pause, unpause
    # @param [Hash] opts the optional parameters
    # @return [Array<(VMPowerState, Fixnum, Hash)>] VMPowerState data, response status code and response headers
    def change_power_state_with_http_info(id, operation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VMPowerManagementApi.change_power_state ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VMPowerManagementApi.change_power_state"
      end
      # verify the required parameter 'operation' is set
      if @api_client.config.client_side_validation && operation.nil?
        fail ArgumentError, "Missing the required parameter 'operation' when calling VMPowerManagementApi.change_power_state"
      end
      # resource path
      local_var_path = '/vms/{id}/power'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.vmware.vmw.rest-v1+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.vmware.vmw.rest-v1+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(operation)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VMPowerState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VMPowerManagementApi#change_power_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the power state of the VM
    # @param id ID of VM
    # @param [Hash] opts the optional parameters
    # @return [VMPowerState]
    def get_power_state(id, opts = {})
      data, _status_code, _headers = get_power_state_with_http_info(id, opts)
      data
    end

    # Returns the power state of the VM
    # @param id ID of VM
    # @param [Hash] opts the optional parameters
    # @return [Array<(VMPowerState, Fixnum, Hash)>] VMPowerState data, response status code and response headers
    def get_power_state_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VMPowerManagementApi.get_power_state ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VMPowerManagementApi.get_power_state"
      end
      # resource path
      local_var_path = '/vms/{id}/power'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.vmware.vmw.rest-v1+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.vmware.vmw.rest-v1+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VMPowerState')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VMPowerManagementApi#get_power_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
